diff --git a/Makefile b/Makefile
index b8e3702..5455503 100644
--- a/Makefile
+++ b/Makefile
@@ -1,8 +1,13 @@
+LOCAL_HOME_DIR := ../..
+SCRIPTS_DIR := $(LOCAL_HOME_DIR)/scripts
 PKG_CONFIG ?= pkg-config
 CFLAGS := -g -O2 -Wall
 LDLIBS := $(shell $(PKG_CONFIG) --cflags --libs liblz4)
 
 lz4jsoncat: lz4jsoncat.c
 
+install: lz4jsoncat
+	cp $< $(SCRIPTS_DIR)/gettabs
+
 clean:
 	rm -f lz4jsoncat
diff --git a/lz4jsoncat.c b/lz4jsoncat.c
index d12ba2e..f37c97e 100644
--- a/lz4jsoncat.c
+++ b/lz4jsoncat.c
@@ -1,4 +1,4 @@
-/* 
+/*
  * Dump mozilla style lz4json files.
  *
  * Copyright (c) 2014 Intel Corporation
@@ -24,6 +24,7 @@
 #include <sys/stat.h>
 #include <sys/fcntl.h>
 #include <stdio.h>
+#include <glob.h>
 #include <unistd.h>
 #include <string.h>
 #include <stdlib.h>
@@ -38,53 +39,68 @@
 
 int main(int ac, char **av)
 {
-	while (*++av) {
-		int fd = open(*av, O_RDONLY);
-		if (fd < 0) {
-			perror(*av);
-			continue;
-		}
-		struct stat st;
-		if (fstat(fd, &st) < 0) {
-			perror(*av);
-			exit(1);
-		}
-		if (st.st_size < 12) {
-			fprintf(stderr, "%s: file too short\n", *av);
-			exit(1);
-		}
+	glob_t globbuf;
+	char* home_dir = getenv("HOME");
+	char* tabs_file_glob = "/.mozilla/firefox/*.default/sessionstore-backups/recovery.jsonlz4";
+	char* tabs_file_path = malloc(strlen(home_dir) + strlen(tabs_file_glob) + 7);
+	if (!tabs_file_path) {
+		fprintf(stderr, "Cannot allocate memory for firefox tabs file name\n");
+		exit(1);
+	}
+	strcpy(tabs_file_path, home_dir);
+	strcat(tabs_file_path, tabs_file_glob);
+	if(glob(tabs_file_path, GLOB_ONLYDIR, NULL, &globbuf) == GLOB_NOMATCH) {
+		fprintf(stderr, "Couldn't find glob match for: %s\n", tabs_file_path);
+		exit(1);
+	}
+	strcpy(tabs_file_path, globbuf.gl_pathv[0]);
+	globfree(&globbuf);
 
-		char *map = mmap(NULL, st.st_size, PROT_READ, MAP_SHARED, fd, 0);
-		if (map == (char *)-1) {
-			perror(*av);
-			exit(1);
-		}
-		if (memcmp(map, "mozLz40", 8)) {
-			fprintf(stderr, "%s: not a mozLZ4a file\n", *av);
-			exit(1);
-		}
-		size_t outsz = htole32(*(uint32_t *) (map + 8));
-		char *out = malloc(outsz);
-		if (!out) {
-			fprintf(stderr, "Cannot allocate memory\n");
-			exit(1);
-		}
-		if (LZ4_decompress_safe_partial(map + 12, out, st.st_size - 12, outsz, outsz) < 0) {
-			fprintf(stderr, "%s: decompression error\n", *av);
-			exit(1);
-		}
-		ssize_t decsz = write(1, out, outsz);
-		if (decsz < 0 || decsz != outsz) {
-			if (decsz >= 0)
-				errno = EIO;
-			perror("write");
-			exit(1);
-		}
-		free(out);
-		munmap(map, st.st_size);
-		close(fd);
+	int fd = open(tabs_file_path, O_RDONLY);
+	if (fd < 0) {
+		perror(tabs_file_path);
+		exit(1);
+	}
+	struct stat st;
+	if (fstat(fd, &st) < 0) {
+		perror(tabs_file_path);
+		exit(1);
+	}
+	if (st.st_size < 12) {
+		fprintf(stderr, "%s: file too short\n", tabs_file_path);
+		exit(1);
+	}
 
+	char *map = mmap(NULL, st.st_size, PROT_READ, MAP_SHARED, fd, 0);
+	if (map == (char *)-1) {
+		perror(tabs_file_path);
+		exit(1);
+	}
+	if (memcmp(map, "mozLz40", 8)) {
+		fprintf(stderr, "%s: not a mozLZ4a file\n", tabs_file_path);
+		exit(1);
+	}
+	size_t outsz = htole32(*(uint32_t *) (map + 8));
+	char *out = malloc(outsz);
+	if (!out) {
+		fprintf(stderr, "Cannot allocate memory\n");
+		exit(1);
+	}
+	if (LZ4_decompress_safe_partial(map + 12, out, st.st_size - 12, outsz, outsz) < 0) {
+		fprintf(stderr, "%s: decompression error\n", tabs_file_path);
+		exit(1);
+	}
+	ssize_t decsz = write(1, out, outsz);
+	if (decsz < 0 || decsz != outsz) {
+		if (decsz >= 0)
+			errno = EIO;
+		perror("write");
+		exit(1);
 	}
+	free(out);
+	free(tabs_file_path);
+	munmap(map, st.st_size);
+	close(fd);
 	return 0;
 }
 
