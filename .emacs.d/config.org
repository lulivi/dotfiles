#+TITLE:  initialize.org
#+AUTHOR: Luis Liñán
#+EMAIL:  luislivilla@gmail.com

* Emacs easy access

** Restart emacs

[[https://github.com/iqbalansari/restart-emacs][Restart-emacs]] is a package to
restart Emacs from within Emacs. It offers the command =restart-emacs=, which
kills the current Emacs session and starts a new session.

#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :ensure t)


#+END_SRC


** Reload init.el

The configuration files can be reloaded at any time using =C-S-r=.
This eases the process of writing, debugging and testing the
configuration file. Current set variables will not be removed; and
Emacs will need a complete restart to clean them.

#+BEGIN_SRC emacs-lisp
(defun reload-init ()
  "Reload init.el config file"
  (interactive)
  (load-file "~/.emacs.d/init.el"))
(defalias 'ri 'reload-init)
#+END_SRC


* Files

#+BEGIN_SRC emacs-lisp
; Easy access files
(setq emacsd  (expand-file-name "~/.emacs.d"))
(setq git     (expand-file-name "~/git"))
(setq etsiit  (expand-file-name "/mnt/Data/Mega/ETSIIT/17-18/2cuatrimestre"))
(setq config  (expand-file-name "~/.config"))

(defun em/ ()
  (interactive)
  (find-file emacsd))
(defun em/config ()
  (interactive)
  (find-file (format "%s/%s" emacsd "config.org")))
(defun em/init ()
  (interactive)
  (find-file (format "%s/%s" emacsd "init.el")))
(defun conf/fish ()
  (interactive)
  (find-file (format "%s/%s" config "fish/config.fish")))
(defun conf/bspwm ()
  (interactive)
  (find-file (format "%s/%s" config "bspwm/bspwmrc")))
(defun conf/sxhkd ()
  (interactive)
  (find-file (format "%s/%s" config "sxhkd/sxhkdrc")))
(defun conf/compton ()
  (interactive)
  (find-file (format "%s/%s" config "compton/compton.conf")))
(defun conf/dunst ()
  (interactive)
  (find-file (format "%s/%s" config "dunst/dunstrc")))
(defun conf/polybar ()
  (interactive)
  (find-file (format "%s/%s" config "polybar/config")))
(defun etsiit/ ()
  (interactive)
  (find-file etsiit))
#+End_SRC


* Editor

** Basic config

#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice "~/git/")
(setq tab-width 4)
(set-face-attribute 'default t
  :font "Fira Code")
(setq visual-line-mode t)
(set-frame-parameter (selected-frame) 'alpha '(95))
(add-to-list 'default-frame-alist '(alpha 95))
#+END_SRC


** Display line numbers

#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode)
#+END_SRC


** Display current column and line

#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
(setq line-number-mode t)
#+END_SRC


** Whitespaces tweaking

#+BEGIN_SRC emacs-lisp
;; make whitespace-mode use just basic coloring
(use-package whitespace
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'whitespace-mode)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (setq delete-trailing-lines nil))
  (setq whitespace-style (quote
    (face spaces indentation tabs newline space-mark tab-mark newline-mark
      indentation-mark lines-tail)))
;; Make whitespace-mode and whitespace-newline-mode use “¶” for end of line
;; char and “▷” for tab.
;; all numbers are unicode codepoint in decimal. e.g. (insert-char 182 1)
(setq whitespace-display-mappings '(
  ; SPACE 32 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
  (space-mark 32 [183] [46])
  ; NEWLINE 10 「 」, 8629 DOWNWARDS ARROW WITH CORNER LEFTWARDS 「↵」
  (newline-mark 10 [8629 10])
  ; TAB 9  「 」, 8594 RIGHTWARDS ARROW 「→」, 92 REVERSE SOLIDUS 「\」
  (tab-mark 9 [8594 9] [92 9])))
(set-face-attribute 'whitespace-space nil
  :foreground "gray40"
  :background nil)
(set-face-attribute 'whitespace-indentation nil
  :foreground nil
  :background "gray20")
(setq whitespace-line-column 79)
#+End_SRC


** No tabs

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+End_SRC


* Progamming

** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-c g" . magit-status)
)
#+END_SRC


** Languages

*** Python mode

#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :ensure t
  :config
  (add-hook 'python-mode-hook 'python-mode)
)
#+END_SRC


*** Clips mode

#+BEGIN_SRC emacs-lisp
(use-package clips-mode
  :ensure t
  :config
  (add-hook 'clips-mode-hook 'clips-mode)
)
#+END_SRC


*** Lua mode

#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :ensure t
  :config
  (add-hook 'lua-mode-hook 'lua-mode)
)
#+END_SRC


*** Markdown mode

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
)
(use-package markdown-toc
  :ensure t
)
(use-package flymd
  :ensure t
  :config
  (setq flymd-output-directory "/tmp/")
)
#+END_SRC


* Wrokflow

** Drag staff
[[https://github.com/rejeep/drag-stuff.el][Drag-staff]] Simplifies dragging
blocks of code.

#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :ensure t
  :init
  (drag-stuff-mode t)
  :config
  (drag-stuff-global-mode 1)
  (drag-stuff-define-keys))
#+END_SRC


** Yes-no to y-n

Yes-no questions are unnecessarily long.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC


** Clipboard

#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard-manager t)
#+END_SRC


** Shell

Starts shell using =C-c s=.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c s") 'eshell)
#+END_SRC


** Multiple cursors

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :init
  (multiple-cursors-mode)
  :config
  (global-set-key (kbd "C->")           'mc/mark-next-like-this)
  (global-set-key (kbd "C-S->")         'mc/mark-next-like-this-world)
  (global-set-key (kbd "C-<")           'mc/mark-previous-like-this)
  (global-set-key (kbd "C-S-<")         'mc/mark-previous-like-this-world)
  (global-set-key (kbd "C-c a")         'mc/mark-all-like-this)
  (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click))
#+END_SRC


* Backup files

Disables backup files.

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC


* Custom file

#+BEGIN_SRC emacs-lisp
;; (setq custom-file "~/.emacs.d/custom.el")
;; (load custom-file)
#+END_SRC
